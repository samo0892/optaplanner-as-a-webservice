swagger: "2.0"
info:
  description: "This is a webservice to optimize a given tour with many stops"
  version: "1.0.0"
  title: "OptaPlanner as a webservice"
  #termsOfService: "http://swagger.io/terms/"
  #contact:
    #email: "apiteam@swagger.io"
 # license:
  #  name: "Apache 2.0"
  #  url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "petstore.swagger.io"
#basePath: "/v2"
tags:
- name: "stop"
  description: "Operations about stop"
- name: "user"
  description: "Operations about user"
  #externalDocs:
 #   description: "Find out more about our store"
  #  url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /stop/allstop:
    get:
      tags:
      - "stop"
      summary: "Get all stops"
      description: ""
      operationId: "getAllStops"
      produces:
      - "application/xml"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Stop"
        404:
          description: "Stops not found"
  /register/stop:
    post:
      tags:
      - "stop"
      summary: "Add a new stop"
      description: ""
      operationId: "register"
      consumes:
      - "application/xml"
      produces:
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Stop object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Stop"
      responses:
        200:
          description: "OK"
        401:
          description: "OK"
  /update/stop:
    put:
      tags:
      - "stop"
      summary: "Update an existing stop"
      description: ""
      operationId: "updateStop"
      consumes:
      - "application/xml"
      produces:
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Stop object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Stop"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Stop not found"
        405:
          description: "Validation exception"
  /delete/stop/{id}:
    delete:
      tags:
      - "stop"
      summary: "Delete stop"
      description: "This can only be done by the logged in admin."
      operationId: "deleteStop"
      produces:
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of a stop that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Stop not found" 
  /start-optimizer:
    post:
      tags:
      - "stop"
      summary: "Start optimizer"
      description: "This can only be done by the logged in user"
      operationId: "startOptimizer"
      produces: 
        - "application/xml"
      consumes:
        - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Start optimizing process of the stops"
        required: true
        schema:
          $ref: "#/definitions/Tour"
      responses:
        200:
          description: "OK"
        401:
          description: "OK"
  /stop-optimizer:
    get:
      tags:
      - "stop"
      summary: "Stop optimizer"
      description: "This can only be done by the logged in user. This stops the actual optimizing process."
      operationId: "stopOptimizer"
      produces: 
        - "application/xml"
      consumes:
        - "application/xml"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tour"
        404:
          description: "Stop optimizer not found"
      
  /register/user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in admin."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "register successful"
  /login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /logout:
    post:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful logged out"
  /user/alluser:
    get:
      tags:
      - "user"
      summary: "Get all user"
      description: "This can only be done by the logged in admin."
      operationId: "getAllUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /update/user:        
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in admin."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /delete/user/{id}:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in admin."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid ID of user supplied"
        404:
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      lastname:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
        description: "role of an user"
        enum:
        - "admin"
        - "user"
      registrationStatus:
        type: "string"
        example: "successfull"
    xml:
      name: "User"
  Stop:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
      minOccurs:
        type: "boolean"
      maxOccurs:
        type: "boolean"
      street:
        type: "string"
      houseNo:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      longitude:
        type: "number"
        format: "double"
      latitude:
        type: "number"
        format: "double"
      radius:
        type: "number"
        format: "double"
      customerNo:
        type: "string"
      orderNo:
        type: "string"
      description:
        type: "string"
      isStartAddress:
        type: "boolean"
      isEndAddress:
        type: "boolean"
      sortNo:
        type: "integer"
      distanceFromPrevious:
        type: "number"
        format: "double"
      minutesFromPrevious:
        type: "integer"
      groupId:
        type: "integer"
      name:
        type: "string"
    xml:
      name: "Stop"
  Tour:
    type: "object"
    properties:
      tourname:
        type: "string"
      assetName:
        type: "string"
      totalDistance:
        type: "number"
        format: "double"
      totalminutes:
        type: "integer"
      truckMode:
        type: "boolean"
      stops:
        $ref: "#/definitions/Stop"
    xml:
      name: "Tour"